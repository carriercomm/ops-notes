一、URL
#http://repo.varnish-cache.org/source/varnish-3.0.3.tar.gz @ http://repo.varnish-cache.org/source/
#http://repo.varnish-cache.org/source/varnish-3.0.2-streaming.tar.gz @ http://repo.varnish-cache.org/source/
#安装方法 https://www.varnish-cache.org/docs/3.0/installation/install.html#compiling-varnish-from-source




二.下载并安装
wget http://repo.varnish-cache.org/source/varnish-3.0.3.tar.gz
tar zxf varnish-3.0.3.tar.gz
cd varnish-3.0.3
sh autogen.sh
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
./configure  --prefix=/webser/varnish
make -j 16
make install
cd ../
rm -rf ./varnish-3.0.3

下载页面 ，本文按3.0.0测试

安装(可以通过--prefix指定安装目录（必须是存在的目录），测试中的安装目录为/webser/varnish)。PS：如果确实已安装 pcre 包，依然报错 no package 'libpcre' found，解决办法（文中pkgconfig的路径需要自己确定）


二.启动

 /webser/varnish/sbin/varnishd -f /webser/varnish/vcl.conf -s malloc,4G -w 10000,50000,120 -p thread_pools=32 -p thread_pool_max=10000 -p thread_pool_min=200 -p thread_pool_timeout=30 -p http_max_hdr=256 -p http_req_hdr_len=8192 -p sess_timeout=20 -T 0.0.0.0:9090 -S /webser/varnish/key
/webser/varnish/key是密码文件
-f 指定配置文件路径。
-s 缓存的存储类型和存储容量。
-s malloc; malloc类型 -s file  [default: use /tmp]
-s file,<dir_or_file>
-s file,<dir_or_file>,<size>
-s persist{experimenta}
-s file,<dir_or_file>,<size>,<granularity>
-T 127.0.0.1:2000 开启基于文本的管理接口，可以在不停止varnish的情况下来管理varnish。推荐只监听本机对管理接口的访问。
-a 0.0.0.0:8080 制定监听所有IP发给8080端口的http请求，如果在生产环境下，应该让varnish监听80，这是默认端口。
-w int[,int[,int]] 工作者线程数
-w 
-w min,max
-w min,max,timeout [default: -w2,500,300]
 

-P file 指定Pid 文件。

-t int 指定缓存TTL，单位s。默认为120 。VCL的TTL可以覆盖此配置。



三.日志查看
#查看用户客户端
/webser/varnish/bin/varnishtop -l -i RxHeader -C -I ^User-Agent

#查看哪些访问了后台
/webser/varnish/bin/varnishtop -i txurl

#日志内容
/webser/varnish/bin/varnishlog 查看日志
c 查看前端请求
b 查看后端访问
C 正则表示式忽略大小写
 I 正则匹配
i 标签匹配
1 打印一次就退出
X I的排除版
x i的排除版
d 算上老数据??

四.一些说明
默认缓存时间120s。
设置cookie的响应不会缓存，但发送cookie的请求不影响缓存
Cache-Control: no-cahce 仍会缓存
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 都不影响varnish的缓存
之所以开启session 造成 varnish不能缓存，是由于php加了缓存 Expries为过去时间

五.缓存清除
//若是PURGE vcl 
if (req.request == "PURGE") {
	//若客户端IP不在purge列表中
	if (!client.ip ~ purge) {
		error 405 "Not allowed.";
	}
	
	//清除所有缓存内容
	ban("req.http.host == " + req.http.host);		
	//给出状态信息 200
	error 200 "PURGE Successed";
}


PHP函数配置
/**
 * 清除varnish缓存
 * @param string $domain 网站域名(eg：www.baidu.com)
 * @param boolean $debug 是否输出清除缓存结果信息
 * @param array $sockIpArr varnish服务器地址及端口(端口默认为80)
 */
function purge($domain, $debug = false, $sockIpArr = array())
{
	if (empty($sockIpArr) || !is_array($sockIpArr)) {
		$sockIpArr = array(
			array('ip' => '119.97.137.142'),
			array('ip' => '117.79.224.42'),
			array('ip' => '<span class="skype_c2c_print_container">218.60.11.91</span><span class="skype_c2c_container" dir="ltr" tabindex="-1" onmouseover="SkypeClick2Call.MenuInjectionHandler.showMenu(this, event)" onmouseout="SkypeClick2Call.MenuInjectionHandler.hideMenu(event)" skype_menu_props="{&quot;numberToCall&quot;:&quot;+86218601191&quot;,&quot;isFreecall&quot;:false,&quot;isMobile&quot;:false,&quot;isRtl&quot;:false}"><span class="skype_c2c_highlighting_inactive_common" dir="ltr" skypeaction="skype_dropdown"><span class="skype_c2c_textarea_span"><img class="skype_c2c_logo_img" src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/call_skype_logo.png"><span class="skype_c2c_text_span">218.60.11.91</span><span class="skype_c2c_free_text_span"></span></span></span></span>'),
		);
	}

	$result = array();

	foreach ($sockIpArr as $v) {
		$sockIp = $v['ip'];
		$sockPort = empty($v['port'])?80:intval($v['port']);

		$fp = fsockopen($sockIp, $sockPort, $errno, $errstr, 30);

		if (!$fp) {
			$result[$sockIp] = false;
			continue;
		}

		$out = "PURGE / HTTP/1.1rn";
		$out .= "Host: $domainrn";
		$out .= "Connection: Closernrn";

		fwrite($fp, $out);

		if (!feof($fp)) {

			if ($debug) {
				while (!feof($fp)) {
					echo fgets($fp, 128);
				}
			}

			$result[$sockIp] = true;

		} else $result[$sockIp] = false;

		fclose($fp);
	}
	return $result;
}